"""
PDF Generation module for AI Research Agent
"""

import time
from pathlib import Path
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer


class PDFGenerator:
    """Handles PDF report generation with enhanced formatting"""
    
    def __init__(self):
        self.styles = getSampleStyleSheet()
    
    def create_pdf(self, content: str, filename: str, topic: str = None) -> bool:
        """
        Create PDF report with enhanced formatting
        
        Args:
            content: Report content in markdown format
            filename: Output PDF filename
            topic: Optional topic for title extraction
            
        Returns:
            bool: Success status
        """
        print(f"üìÑ Creating PDF: {filename}")
        try:
            # Create directory if needed
            Path(filename).parent.mkdir(parents=True, exist_ok=True)
            
            doc = SimpleDocTemplate(filename, pagesize=letter)
            story = []
            
            # Enhanced title section
            story.append(Paragraph("AI Research Report", self.styles['Title']))
            story.append(Spacer(1, 12))
            
            # Topic extraction and formatting
            if not topic:
                topic = Path(filename).stem.replace('_', ' ').title()
            story.append(Paragraph(f"Topic: {topic}", self.styles['Heading1']))
            story.append(Spacer(1, 12))
            
            # Metadata
            story.append(Paragraph(f"Generated: {time.strftime('%Y-%m-%d %H:%M:%S')}", self.styles['Normal']))
            story.append(Paragraph("Powered by AI Research Agent", self.styles['Italic']))
            story.append(Spacer(1, 20))
            
            # Process content with better formatting
            self._process_content(content, story)
            
            # Add footer
            story.append(Spacer(1, 20))
            story.append(Paragraph("---", self.styles['Normal']))
            story.append(Paragraph("Report generated by AI Research Agent", self.styles['Italic']))
            
            doc.build(story)
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è PDF creation failed: {e}")
            return False
    
    def _process_content(self, content: str, story: list):
        """Process markdown content and add to PDF story"""
        sections = content.split('## ')
        
        for section in sections:
            if not section.strip():
                continue
                
            lines = section.split('\n')
            section_title = lines[0].strip()
            section_content = '\n'.join(lines[1:]).strip()
            
            if section_title:
                # Add section header
                story.append(Paragraph(section_title, self.styles['Heading2']))
                story.append(Spacer(1, 8))
                
                # Process content with better styling
                for line in section_content.split('\n'):
                    line = line.strip()
                    if not line:
                        continue
                    
                    if line.startswith('-'):
                        # Bullet point
                        story.append(Paragraph(line[1:].strip(), self.styles['Bullet']))
                    elif line.startswith('http'):
                        # URL
                        story.append(Paragraph(f'<link href="{line}">{line}</link>', self.styles['Normal']))
                    else:
                        # Regular text
                        story.append(Paragraph(line, self.styles['BodyText']))
                
                story.append(Spacer(1, 15))
    
    def create_text_report(self, content: str, filename: str) -> bool:
        """
        Create plain text report as fallback
        
        Args:
            content: Report content
            filename: Output filename (will change extension to .txt)
            
        Returns:
            bool: Success status
        """
        try:
            txt_filename = Path(filename).with_suffix('.txt')
            txt_filename.parent.mkdir(parents=True, exist_ok=True)
            
            with open(txt_filename, 'w', encoding='utf-8') as f:
                f.write(f"AI Research Report\n")
                f.write(f"Generated: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write("=" * 60 + "\n\n")
                f.write(content)
                f.write("\n\n" + "=" * 60)
                f.write("\nReport generated by AI Research Agent")
            
            print(f"üìÑ Text report saved: {txt_filename}")
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è Text report creation failed: {e}")
            return False